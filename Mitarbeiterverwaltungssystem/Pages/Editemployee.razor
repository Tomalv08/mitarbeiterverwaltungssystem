@page "/editEmployee"
@inject EmployeeState EmployeeState
@inject IJSRuntime JS
@using Mitarbeiterverwaltungssystem.Modals

<h3>Edit Employee</h3>
<div class="form-container">
    <div class="form-group">
        <label>Select Employee:</label>
        <select @onchange="OnEmployeeSelect" class="form-control">
            <option value="0">Select Employee</option>
            @foreach (var employee in EmployeeState.Employees)
            {
                <option value="@employee.Id">@employee.Name</option>
            }
        </select>
    </div>

    @if (selectedId != 0)
    {
        <form @onsubmit="EditSelectedEmployee">
            <div class="form-group">
                <label>Name:</label>
                <input value="@name" @oninput="@(e => name = e.Value.ToString())" class="form-control" required />
            </div>
            <div class="form-group">
                <label>Position:</label>
                <input value="@position" @oninput="@(e => position = e.Value.ToString())" class="form-control" required />
            </div>
            <div class="form-group">
                <label>Role:</label>
                <select value="@role" @onchange="RoleChanged" class="form-control">
                    <option value="Employee">Employee</option>
                    <option value="Manager">Manager</option>
                </select>
            </div>
            @if (role == "Manager")
            {
                <div class="form-group">
                    <label>Department:</label>
                    <input value="@department" @oninput="@(e => department = e.Value.ToString())" class="form-control" required />
                </div>
            }
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
    }
</div>

@code {
    private int selectedId;
    private string name;
    private string position;
    private string role;
    private string department;

    private void OnEmployeeSelect(ChangeEventArgs e)
    {
        selectedId = int.Parse(e.Value.ToString());
        var employee = EmployeeState.Employees.FirstOrDefault(emp => emp.Id == selectedId);
        if (employee != null)
        {
            name = employee.Name;
            position = employee.Position;
            if (employee is Manager manager)
            {
                role = "Manager";
                department = manager.Department;
            }
            else
            {
                role = "Employee";
                department = string.Empty;
            }
        }
    }

    private void EditSelectedEmployee()
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(position))
        {
            JS.InvokeVoidAsync("alert", "Name and Position are required.");
            return;
        }

        var updatedEmployee = role == "Manager"
            ? new Manager(selectedId, name, position, department) as Employee
            : new Employee(selectedId, name, position);

        EmployeeState.EditEmployee(updatedEmployee);

        selectedId = 0;
        name = string.Empty;
        position = string.Empty;
        role = "Employee";
        department = string.Empty;
    }

    private void RoleChanged(ChangeEventArgs e)
    {
        role = e.Value.ToString();
    }
}
