@page "/addEmployee"

@using Mitarbeiterverwaltungssystem.Modals
@inject IJSRuntime JS
@inject EmployeeState EmployeeState
<style>
    .form-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background: #f4f4f4;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

</style>
<h3>Add New Employee</h3>
<div class="form-container">
    <form @onsubmit="AddNewEmployee">
        <div class="form-group">
            <label>Name:</label>
            <input @bind="name" class="form-control" placeholder="Enter name" required />
        </div>
        <div class="form-group">
            <label>Position:</label>
            <input @bind="position" class="form-control" placeholder="Enter position" required />
        </div>
        <div class="form-group">
            <label>Role:</label>
            <select @bind="role" class="form-control">
                <option value="Employee">Employee</option>
                <option value="Manager">Manager</option>
            </select>
        </div>
        @if (role == "Manager")
        {
            <div class="form-group">
                <label>Department:</label>
                <input @bind="department" class="form-control" placeholder="Enter department" required />
            </div>
        }
        <button type="submit" class="btn btn-primary">Add Employee</button>
    </form>
</div>

@code {
    private string name;
    private string position;
    private string role = "Employee";
    private string department;

    private void AddNewEmployee()
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(position))
        {
            JS.InvokeVoidAsync("alert", "Name and Position are required.");
            return;
        }

        if (role == "Manager" && string.IsNullOrEmpty(department))
        {
            JS.InvokeVoidAsync("alert", "Department is required for Managers.");
            return;
        }

        Employee newEmployee;
        if (role == "Manager")
        {
            newEmployee = new Manager(new Random().Next(1, 1000), name, position, department);
        }
        else
        {
            newEmployee = new Employee(new Random().Next(1, 1000), name, position);
        }

        EmployeeState.AddEmployee(newEmployee);
        name = string.Empty;
        position = string.Empty;
        role = "Employee";
        department = string.Empty;
    }
}
